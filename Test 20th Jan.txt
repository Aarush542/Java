// 1)
// Problem Statement – Chaman planned to choose a four digit lucky number for his car. His
// lucky numbers are 3,5 and 7. Help him find the number, whose sum is divisible by 3 or 5 or
// 7. Provide a valid car number, Fails to provide a valid input then display that number is not a
// valid car number.
// Note : The input other than 4 digit positive number[includes negative and 0] is considered as
// invalid.
// Refer the samples, to read and display the data.
// Sample Input 1:
// Enter the car no:1234
// Sample Output 1:
// Lucky Number
// Sample Input 2:
// Enter the car no:1214
// Sample Output 2:
// Sorry its not my lucky number
// Sample Input 3:
// Enter the car no:14
// Sample Output 3:
// 14 is not a valid car number

import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("enter the value ");
        int a = sc.nextInt();
        int sum = 0;
        int rem;
        if  (a<1000 || a >9999){
            System.out.println(a+" is a Invalid Number");
                    }
                    else{
        while (a > 0) {
            rem = a % 10;
            sum = sum + rem;
            a = a / 10;
        }
    
        System.out.println(sum);
        
        if(sum%3==0 || sum%5==0 || sum%7==0)
        {
            System.out.println("Lucky Number");

        }
        else{
            System.out.println("Sorry it's not a lucky number");
        }
    }
    }
        



    }


// 2)
// XYZ Technologies is in the process of increment the salary of the employees. This
// increment is done based on their salary and their performance appraisal rating.
// If the appraisal rating is between 1 and 3, the increment is 10% of the salary.
// If the appraisal rating is between 3.1 and 4, the increment is 25% of the salary.
// If the appraisal rating is between 4.1 and 5, the increment is 30% of the salary.
// Help them to do this, by writing a program that displays the incremented salary. Write a
// class “IncrementCalculation.java” and write the main method in it.
// Note : If either the salary is 0 or negative (or) if the appraisal rating is not in the range 1 to
// 5 (inclusive), then the output should be “Invalid Input”.
// Sample Input 1 :
// Enter the salary
// 8000
// Enter the Performance appraisal rating
// 3
// Sample Output 1 :
// 8800
// Sample Input 2 :
// Enter the salary
// 7500
// Enter the Performance appraisal rating
// 4.3
// Sample Output 2 :
// 9750
// Sample Input 3 :
// Enter the salary
// -5000
// Enter the Performance appraisal rating
// 6
// Sample Output 3 :
// Invalid Input

import java.util.Scanner;
public class Main {

    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter Salary");
        int s=sc.nextInt();
        System.out.println("Enter Appraisal rating");
        float a=sc.nextFloat();
        if(a>=1 && a<=3)
        {
            int t=s+(s*10/100);
            System.out.println(t);
        }
        if(a>=3.1 && a<=4)
        {
            int t=s+(s*25/100);
            System.out.println(t);
        }
        if(a>=4.1 && a<=5)
        {
            int t=s+(s*30/100);
            System.out.println(t);
        }
        if(s<=0 || a<=0 || a>=6)
        {
            System.out.println("Invalid Input");
        }
    }
}

// 3)
// Problem Statement – Rhea Pandey’s teacher has asked her to prepare well for the
// lesson on seasons. When her teacher tells a month, she needs to say the season
// corresponding to that month. Write a program to solve the above task.
// Spring – March to May,
// Summer – June to August,
// Autumn – September to November and,
// Winter – December to February.
// Month should be in the range 1 to 12. If not the output should be “Invalid month”.
// Sample Input 1:
// Enter the month:11
// Sample Output 1:
// Season:Autumn
// Sample Input 2:
// Enter the month:13
// Sample Output 2:
// Invalid month

import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner obj = new Scanner(System.in);
        System.out.println("Enter Month");
        int w=obj.nextInt();
        if( w==3 || w==4|| w==5)
        {
            System.out.println("Spring");
        }
         if(w==6 ||w==7 ||w==8)
        {
            System.out.println("Summer");
        }
        if(w==9 ||w==10 ||w==11)
        {
            System.out.println("Autumm");
        }
        if(w==12 ||w==1 || w==2)
        {
            System.out.println("Winter");
        }
        else if(w>=13 || w<=0){
            System.out.println("Invalid input");
        }

    }
}

// 4)
// An intelligence agency has received reports about some threats. The reports consist of
// numbers in a mysterious method. There is a number “N” and another number “R”. Those
// numbers are studied thoroughly and it is concluded that all digits of the number ‘N’ are
// summed up and this action is performed ‘R’ number of times. The resultant is also a single
// digit that is yet to be deciphered. The task here is to find the single-digit sum of the given
// number ‘N’ by repeating the action ‘R’ number of times.
// If the value of ‘R’ is 0, print the output as ‘0’.
// Example 1:
// Input :
// 99 -> Value of N
// 3 -> Value of R
// Output :
// 9 -> Possible ways to fill the cistern.
// Explanation:
// Here, the number N=99
// 1)Sum of the digits N: 9+9 = 18
// 2)Repeat step 2 ‘R’ times i.e. 3 tims (9+9)+(9+9)+(9+9) = 18+18+18 =54
// 3)Add digits of 54 as we need a single digit 5+4
// Hence , the output is 9.
// Example 2:
// Input :
// 1234 -> Value of N
// 2 -> Value of R
// Output :
// 2 -> Possible ways to fill the cistern
// Explanation:
// Here, the number N=1234
// 1)Sum of the digits of N: 1+2+3+4 =10
// 2)Repeat step 2 ‘R’ times i.e. 2 times (1+2+3+4)+(1+2+3+4)= 10+10=20
// 3)Add digits of 20 as we need a single digit. 2+0=2
// Hence, the output is 2.
// Constraints:
// 0<N<=1000
// 0<=R<=50
// The Input format for testing
// The candidate has to write the code to accept 2 input(s)
// First input- Accept value for N (positive integer number)
// Second input: Accept value for R(Positive integer number)
// The output format for testing
// The output should be a positive integer number or print the message (if any) given in the
// problem statement. (Check the output in Example 1, Example 2).

import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter value of N");
        int n=sc.nextInt();
        System.out.println("Enter value of R");
        int r=sc.nextInt();
        int sum=0;
        int rem;
        
        while(n>0)
        {
            rem = n % 10;
            sum = sum + rem;
            n = n / 10;
        
            System.out.println(sum);
        }
        int c=sum*r;
        System.out.println("R : "+c);
        int sum1=0;
            int rem1;
        while(c>0)
        {
            
            rem1 = c % 10;
            sum1 = sum1 + rem1;
            c = c / 10;

            }
            System.out.print(sum1);
        
        
        }
    }

// 5)
// There is a JAR full of candies for sale at a mall counter. JAR has the capacity N, that is JAR
// can contain maximum N candies when JAR is full. At any point of time. JAR can have M
// number of Candies where M<=N. Candies are served to the customers. JAR is never remain
// empty as when last k candies are left. JAR if refilled with new candies in such a way that
// JAR get full.
// Write a code to implement above scenario. Display JAR at counter with available number of
// candies. Input should be the number of candies one customer can order at point of time.
// Update the JAR after each purchase and display JAR at Counter.
// Output should give number of Candies sold and updated number of Candies in JAR.
// If Input is more than candies in JAR, return: “INVALID INPUT”
// Given,
// N=10, where N is NUMBER OF CANDIES AVAILABLE
// K =< 5, where k is number of minimum candies that must be inside JAR ever.
// Example 1:(N = 10, k =< 5)
// Input Value
// 3
// Output Value
// NUMBER OF CANDIES SOLD : 3
// NUMBER OF CANDIES AVAILABLE : 7
// Example : (N=10, k<=5)

import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner obj=new Scanner(System.in);
        int n=10;
        System.out.println("Enter number of candies not more than 10");
        int k=obj.nextInt();
        if(k<=10)
        {
            int s=n-k;
            System.out.println("Number of candies sold: "+k);
            System.out.println("Number of candies available: "+s);

        }
        else{
            System.out.println("Invalid");
        }
    }
}


